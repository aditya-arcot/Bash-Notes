# Basic Shell Programming

# run in subshell using './first_script'
# 	variables, functions are not saved to shell
# run in shell using 'source first_script'

echo section 0
echo ---------
# setting a variable
hatter=mad
echo set variable hatter - $hatter
# can be unset using 'unset' command
echo
echo


echo section 1
echo ---------
# use 'type' to find definitions
# '-a' argument shows all in precedence order
type -a ls
echo
echo


echo section 2
echo ---------
# positional arguments
# called by number
# use {} for numbers above 9 - ${10}
echo 0 1 2: $0 $1 $2
# called together
echo non-zero: $@ # double quoted - separate strings
echo non-zero: $* # double quoted - single string separated by first character of IFS
# count
echo non-zero count: $#
echo

# these variables are local to script and functions
function f
{
	echo $*
	echo $#
}
f arg1 arg2 ... argN

echo $*
echo $#
echo
echo


echo section 3
echo ---------
# other variables are global to script
v1=aditya
echo $v1

function f2
{
	v1=arcot
	echo $v1
}
f2

echo $v1
echo
echo


echo section 4
echo ---------
# variables can be kept local with keyword 'local'
v1=aditya
echo $v1

function f3
{
	local v1
	v1=arcot
	echo $v1
}
f3

echo $v1
echo
echo


# when using $ to reference variables, no need to use {} when 
# character after name is not letter, digit, or underscore


echo section 5
echo ---------
# string substitution operators
# v1 exists, v2 does not

# return value if exists and not null or default
echo ${v1:-arcot}
echo ${v2:-arcot}
echo

# set variable if doesn't exist or null and return value
echo ${v1:=arcot}
echo ${v2:=arcot}
echo
unset v2

# return value or print varname, message and abort if doesn't exist or null
# default message if none specified
# only exits when run in subshell
echo ${v1:?doesnt exist}
# echo ${v2:?doesnt exist} #commented to avoid abort
echo

# return message if exists and not null, or return null
echo ${v1:+exists}
echo ${v2:+exists}
echo

# substring expansion
# starts at offset and up to length characters
echo ${v1:2:2}
echo ${v2:2:2}
echo
echo


echo section 6
echo ---------
# pattern matching
# patterns can contain wildcard characters
path=/home/cam/book/long.file.name
echo $path
echo ${path##/*/} # delete longest matching part from beginning, return remaining
echo ${path#/*/} # delete shortest matching part from beginning, return remaining
echo ${path%.*} # delete shortest matching part from end, return remaining
echo ${path%%.*} # delete longest matching part from end, return remaining
# longest / shortest is the same for exact matches, only different when using wildcards
echo ${path/m/Z} # replace first longest match of pattern with string
echo ${path//m/Z} # replace all longest matches of pattern with string
# no replacement string causes matches to be deleted

echo
echo ${#path} # length of value
echo

# extended pattern matching
# requires extglob shopt option on
shopt -s extglob

# patterns separated by |
ls *(task_|4-1) # match 0 or more occurrences of patterns - includes null string
ls ?(task_|4-1) # match 0 or 1 of patterns - includes null string

ls +(task_|4-1) # match 1 or more occurrences of patterns
ls @(task_|4-1) # match 1 of patterns

ls !(task_*) #match anything except one of patterns

echo
echo


echo section 7
echo ---------
# grep searches for pattern in files
grep 's ' task*
echo
# shows only filenames
grep -l 's ' task*
echo
echo


echo section 8
echo ---------
# command substitution
# using standard error of command as variable value
a=$(ls -l $(type -path -all ls))
echo "$a" # double quotes preserve original spacing, newlines
echo
echo


echo section 9
echo ---------
# pushd dir - cd to dir, push dir to stack
# popd - pop dir (current) from stack, cd to new top
# stack can be viewed by dirs
pushd ..
popd
dirs
echo
echo



