#!/usr/bin/env bash

# Input/Ouput and Command-Line Processing

### I/O redirectors
# cmd1 | cmd2	pipe

# > file	direct stdout to file (same as 1> file)
# < file	take stdin from file (same as 0< file)
# >> file	direct stdout to file, append if already exists
# n> file	direct file descriptor n to file
# n< file	take file descriptor n from file
# n>> file	direct file descriptor n to file, append if already exists

# >| file	force stdout to file even if noclobber is set
#		noclobber prevents shell from overwriting file with > file
# n>| file	force output to file from file descriptor n even if noclobber is set

# <> file	use file as both stdin and stdout
# n<> file	use file as both input and output for file descriptor n

# << label	here-document
#		allows for batch input to programs
#		stop sending input when label is found

# n>&		duplicate stdout to file descriptor n
# n<&		duplicate stdin from dile descriptor n

# n>&m		file descriptor n is made to be copy of output file descriptor
# 		ex: 2>&1 - stderr file descriptor becomes copy of stdout file descriptor, so both go to same place
# n<&m		file descriptor n is made to be copy of input file descriptor

# &> file	direct stdout and stderr to file

# <&-		close stdin
# >&-		close stdout
# n>&-		close output from file descriptor n
# n<&-		close input from file descriptor n

# n>&word	if n not specified, stdout (file descriptor 1) used
# 		if digits in word do not specify file descriptor open for output, redirection error
# 		as special case, n not specified and word does not expand to 1+ digits, stdout and stderr redirected
# n<&word	if word expands to 1+ digits, file descriptor n is made to be copy of that file descriptor
# 		if digits in word do not specify file descriptor open for input, redirection error
#		if word evaluates to -, file descriptor n closed
#		if n not specified, stdin (file descriptor 0) used
# n>&digit-	move file descriptor digit to file descriptor n, or stdout (1) if n not specified
# n<&digit-	move file descriptor digit to file descriptor n, or stdin (0) if n not specified
# 		digit closed after being duplicated to n


### File descriptors
# integers (starting at 0) that refer to particular streams of data associated with a process
# new process usually has 3
# 	0 - stdin
# 	1 - stdout
# 	2 - stderr
# additional files opened for output or input are assigned from 3 on


### String I/O

## echo - print args to stdout
# dash options
# 	-e	turn on interpretation of backslash-escaped chars
# 	-E	turn off interpretation of backslash-escaped chars
# 	-n	skip final newline
# escape sequences - see pg 169

## printf - more powerful, flexible
# no automatic trailing newline
# usage - printf format-string [args]
# 	can make parts of format string explicit
# format reused as necessary to use up all args
# if not enough args, use 0 or null, as appropriate
# non-zero exit status if cannot perform format conversion

# format specifiers
# 	%c	char
# 	%d	decimal int
# 	%i	decimal int
# 	%e	float in scientific notation ([-]d.precisione[+-]dd)
# 	%E	float in scientific notation ([-]d.precisione[+-]dd)
# 	%f	float ([-]ddd.precision)
# 	%g	shorter of %e or %f conversion, with no trailing 0s
# 	%G	shorter of %E or %f conversion, with no trailing 0s
# 	%o	unsigned octal
# 	%s	string
# 	%u	unsigned decimal
# 	%x	unsigned hex (a-f for 10-15)
# 	%X	unsigned hex (A-F for 10-15)
# 	%%	literal %
# 	%b	instead of %s to expand escape sequences
# 	%q	instead of %s to print so it can be used for shell input

# optional modifiers - %flags width.precision format-specifier
#	width and precision can be specified dynamically - use *

# precision meaning
# 	%d, %i, %o, %u, %x, %X	minimum number of digits to print
# 				padded with leading zeros
# 				default is 1
# 	%e, %E			minimum number of digits to print
# 				padded with zeros after decimal point
# 				default is 10
# 				0 inhibits printing of decimal point
# 	%f			number of digits to right of decimal point
# 	%g, %G			maximum number of significant digits
# 	%s			maximum number of characters to print

# flags
# 	-	left-justify
# 	space	prefix positive values with space and negative with minus
# 	+	always prefix numeric values with sign
# 	#	use alternate form
# 	0	pad output with 0s, not spaces when field width wider than result
# 		only applies to numeric

echo $LINENO
printf "%s %s\n" hello world
printf "hello %s\n" world #explicit
printf ".%-8s?%*s!\n" hello 3 world
printf "%e\n" 123.456789
printf "%15.*f\n" 5 123.456789
echo

## read - read values into shell vars
# usage - read [var1] [var2] ...
# steps
# 	take line from stdin
# 	break line into words delimited by any char in IFS
# 	words assigned to vars
# if more words than vars, excess assigned to last var
# using with no var names assigns to $REPLY

echo $LINENO
echo enter 2 args
read v1 v2
echo v1: $v1
echo v2: $v2
unset v1 v2
echo
echo

# common uses
#	reading line-by-line from file and storing parts as vars
#	prompting user input

# options
#	-a		read into array
#	-d string	delimiter - stop reading line when reaches
#	-e		readline used to gather input line (for interactive shell scripts)
#	-n chars	how many characters will be read
#	-p string	print string before reading input	
#	-r		don't use \ as continuation character, preserve escapes
#	-t time		seconds to wait for input	
#	-s		don't echo characters typed (ex: password)


## I/O redirection for multiple commands
# function call
#	func < infile
# function definition
#	func () {...} < infile
# end of flow-control construct
#	while read a b; do ...; done < infile
#	shell treats compound statements as single command
# command block
#	{ ... } < infile
#	acts as function with no name


### Command-Line Processing
# each line that shell reads from stdin or script is a pipeline
#	contains 1+ commands separated by 0+ pipe characters
# for each pipeline, shell splits into commands, sets up I/O
# for each command, following sequence
#	1 - split into tokens separated by fixed set of metachars
#		space tab newline ; , < > | &
#		types of tokens - words, keywords, redirectors, semicolons
#	2 - check 1st token
#		opening keyword - control-stucture opener, function, {, (
#			command is compound
#			read next command
#			return to step 1
#		other keyword - control-structure middle, end, logical operator
#			syntax error
#		not keyword
#			continue
#	3 - check 1st token
#		alias match
#			substitute, return to step 1 (allows for recursive)
#		no match
#			continue
#	4 - brace expansion
#	5 - ~ expansion
#	6 - parameter (variable) expansion
#	7 - command substitution
#	8 - arithmetic substitution
#	9 - word splitting
#		for parts from steps 6-9
#		using characters in $IFS
#	10 - pathname expansion
#	11 - command lookup for 1st word
#		order - functions, builtins, scripts	
#	12 - run command

# quoting
# 	single quotes - skip steps 1-10
#		cannot have single quotes inside single quotes
#	double quotes - skip steps 1-4, 9-10
#		single quotes inside double quotes have no effect
#		double quote can be inside double quote by escaping

echo $LINENO
person=aditya
echo $person
echo $"person"
echo \$person
echo '$person'
echo "'$person'"
echo ~
echo "~"
echo '~'
unset person
echo

# changing command lookup order
# 	command
#		removes alias, function lookup
#		only built-ins, commands found in search path
#	builtin
#		only built-ins
#	enable
#		enable / disable a shell built-in

# eval
#	tells script to take arguments and run through processing steps again 
#	allows for modifying command strings in a program



