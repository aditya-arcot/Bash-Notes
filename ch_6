# Command-Line Options

# shift [N]
# shifts arguments by N (1 default)

echo $LINENO
set -- -a -b -c d # set arguments
echo args: $*

# check 1st arg until non-option
while [ -n "$(echo "$1" | grep -)" ]; do
	# process option using case
	#   default - early exit for illegal option
	# if option has its own argument, can shift twice
	shift
	echo remaining args: $*
done

echo
echo


# getopts [options_string] [variable_name]
# options_string contains:
#	letters - valid options
#	colons - follows option that requires an argument
#		leading colon prevents default error message
# variable set to ? if illegal
# 	can be handled in case statement
# OPTARG - option argument
# OPTIND - index of start of non-option arguments
# exit status 0 until no more options, then 1
# shift after loop ends

echo $LINENO
set -- -a -bc -d 0 f
echo args: $*

unset OPTIND # not cleared automatically
while getopts ":abcd:" option; do
	case $option in
		a ) echo option a ;;
		b ) echo option b ;;
		c ) echo option c, arg: $OPTARG ;;
		d ) echo option d, arg: $OPTARG ;;
		\? ) echo unknown option
			return 1
	esac
done
shift $((OPTIND-1))

echo args: $*
set --

echo
echo


# declare [option] [variable]
# options
# 	-f	display functions
# 	-F	display function names
# 	-a	display / declare array
# 	-i	display / declare int
# 	-r	display / declare read-only
# 	-x	display / declare export
# use - to turn option on, + to turn off
# works same was as local in functions

echo $LINENO
a=2
b=3
c=a*b
echo without declare: $c
 
declare -i c=a*b # can also assign in another line
echo with declare: $c

unset a b c
declare +i c # important if reusing var name with different type

echo
echo


# quoting strings
# single quotes - string literal
# double quotes - interpretation, expansion (ex: $, \)
#	don't use unless necessary

echo $LINENO
a=3
echo '$a'
echo "$a"
unset a

echo
echo


# arithmetic expressions - $((...))
# operators
# 	++, --
#		post-increment (x++) - return x, then add
#		pre-increment (++x) - add, then return x
# 	+, -, *, /, %
# 		assignment forms also permitted
#	<<, >> - bit shift
#	&, |, ^ - bitwise and, or, exclusive or
#	!, ! - bitwise not, logical not
#	, - sequential execution

echo $LINENO
a=5
echo a: $a
echo a+5: $((a+5))
echo a: $a

echo a+=5: $((a+=5))
echo a: $a
unset a
echo
echo

# can use parenthesis for grouping - no need to escape

echo $LINENO
b=2
echo b: $b
echo b+5*2: $((b+5*2))
echo \(b+5\)*2: $(( ($b+5)*2 ))
unset b
echo
echo


# relational operators
# 	<, >, <==, >==, ==, !=
# 	&&, || - logical and, or
# can be used between values or subexpressions
# results in truth value - 1 for true, 0 for false

echo $LINENO
a=2 b=5
echo $((a==b))
echo $((b>a))
unset a b
echo
echo


# base N numbers
# B#N - N base B
# base 2-36

echo $LINENO
echo $((5#23))
echo
echo


# arithmetic test
# same syntax as string comparison (ch 5) - [ a operator b ]
# alternate syntax - ((...))
# operators: -lt, -gt, -le, -ge, -eq, -ne
# 0 exit status for true, 1 for false - opposite of arithmetic expression above

echo $LINENO
[ 5 -lt 4 ]
echo $?
echo
echo


# let intvar=expression
# same function as declare -i var
# no need to use $(( and ))
# good practice to use single quotes 
# 	avoid special character replacement
#	allows using whitespace

echo $LINENO
let x='(2 + 3) * 5'
echo $x
unset x
echo
echo


# arithmetic for loops
# left out values evaluation to true

# for (( initialization; ending condition; update ))
# do
# 	statements
# done

echo $LINENO
for ((i=5; i<10; i++)); do
	echo $i
done
echo
echo


# arrays
# elements can be accessed by index (starts at 0)
# indices can be an arithmetic expression >= 0

echo $LINENO
echo ${BASH_VERSINFO[2+3]}
# index 0 assumed if none provided
echo $BASH_VERSINFO

# special indices - all elements
# @, *
# work same way as for positional parameters
# unquoted - expands array to separate words
# double quoted - @ is same, * expands array to first char in IFS
# useful in for loops

echo ${BASH_VERSINFO[@]}
IFS=-
echo "${BASH_VERSINFO[*]}"
unset IFS
echo
echo

# array can be manually created
#	empty or nonempty
# attributes apply to entire array

echo $LINENO
declare -a arr
declare -p arr # print
unset arr
echo
echo

# assignment automatically creates array
# unassigned values are not created (null if explicitly referenced)

echo $LINENO
arr[0]=a
arr[2]=c
echo ${arr[@]} # a c

# compound assignment
# indices
# 	not required
# 	out-of-order allowed
# consecutive assignment above last specified index (or 0)
# overwrites entire array if previously defined

arr=(a b [3]=d e [2]=c)
echo ${arr[@]} # a b c d e
echo
echo

# # - check length (entire array or element)

echo $LINENO
echo ${#arr[@]}
echo ${#arr[2]}
echo
echo

# ! - check assigned indices

echo $LINENO
echo ${!arr[@]}
echo
echo

# use unset to destoy
# element or entire array

echo $LINENO
unset arr[2]
echo ${arr[*]}

unset arr
declare -p arr

