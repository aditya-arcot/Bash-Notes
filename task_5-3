# recursive ls with hierarchy structure
# default depth - 4

# non-integer depth input results in ls without depth arg

# use only local vars

recls ()
{
	local line="|"
	local singletab="\t"
	local OPTIND OPTARG option depth
	local i maxtab tab file arg curr files
	local IFS=$'\t'

	while getopts ":d:h" option; do
		case $option in
			d )
				if [ "$OPTARG"  -lt 1 ]; then
					echo depth must be greater than 0
					return 1
				fi
				depth=$OPTARG;;
			h )
				shopt -s dotglob;;
			\? ) echo usage: recls [-d depth] [-h]
					return 1
		esac
	done
	shift $((OPTIND-1))

	if [ -z "$depth" ]; then
		depth=4
	fi

	for ((i=0; i<depth; i++)); do
		maxtab+="$line$singletab"
	done

	if [ -z "$*" ]; then
		__recls_helper .
	else
		__recls_helper "$@"
	fi

	shopt -u dotglob
}

__dir_empty ()
{
	[[ $(find "$1" -maxdepth 1 -mindepth 1 | wc -l) -eq 0 ]]
}

__recls_helper ()
{
	for arg
	do
		if [ ! -e "$arg" ]
		then
			echo "$arg" does not exist
		elif [ -d "$arg" ]
		then
			ls --color=always -d "$arg"
			cd "$arg" || exit
			curr=$PWD
			cd - > /dev/null || exit
			__recdir
		else
			echo "$arg"
		fi
		echo
	done

}

__recdir ()
{
	if __dir_empty "$curr"; then
		return
	fi

	tab=$tab$line$singletab
	if [ "$tab" = "$maxtab" ]; then
		tab=${tab%"$line$singletab"}
		echo -e -n "$tab""$line"
		echo -e "\t"...
		return
	fi

	pushd "$curr" > /dev/null || exit
	files=$(stat --printf '%n\t' -- *)

	for file in $files
	do
		echo -e -n "$tab"
		echo -n "$(ls --color=always -d "$file")"

		if [ -d "$file" ]; then
			echo /
			curr=$curr/$file
			__recdir
			curr=${curr%/*}
		else
			echo
		fi
	done

	popd > /dev/null || exit

	tab=${tab%"$line$singletab"}
}

